from langchain_chroma import Chroma
from langchain_community.document_loaders import TextLoader
from langchain_ollama import OllamaEmbeddings
from langchain_ollama import OllamaLLM
from langchain.chains import RetrievalQA
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_core.prompts import ChatPromptTemplate


loader = TextLoader("./data/dados-sac.md", encoding="utf8")
sac_doc = loader.load()

### splitar os documentos
text_splitter = RecursiveCharacterTextSplitter(
    chunk_size=600,  # chunk size (characters)
    chunk_overlap=10,  # chunk overlap (characters)
    add_start_index=True,  # track index in original document
)

all_splits = text_splitter.split_documents(sac_doc)

embeddings = OllamaEmbeddings(model  = "nomic-embed-text:latest")
vector_store = Chroma(
    collection_name="SAC_DATA",
    embedding_function=embeddings,
)
vector_store.add_documents(documents = all_splits)

retriever = vector_store.as_retriever(
    search_type="mmr",   # ou "mmr" (diversidade)
    search_kwargs={"k": 5}      # retorna 5 documentos mais parecidos
)



template_sac_cea = """
Voc√™ √© um especialista em SAC (Servi√ßo de Atendimento ao Cliente) da C&A.

Seu objetivo √© atender o cliente com empatia, clareza e agilidade, sempre buscando resolver o problema ou esclarecer d√∫vidas de forma cordial e eficiente.

Siga este estilo de comunica√ß√£o:
- Tom: gentil, objetivo, profissional e acolhedor.
- Linguagem: simples, clara e acess√≠vel (evite jarg√µes t√©cnicos).
- Trate o cliente sempre com respeito e pelo nome, quando poss√≠vel.
- Sempre agrade√ßa o contato.
- Em caso de erro da empresa, assuma a responsabilidade com empatia.
- Em caso de reclama√ß√µes, acolha e demonstre interesse genu√≠no em resolver.
- Em caso de d√∫vidas, explique com clareza e proponha o pr√≥ximo passo.

‚ö†Ô∏è Aten√ß√£o:
- Nunca use respostas vagas como "estamos analisando" sem dar um prazo.
- Sempre forne√ßa caminhos claros (ex: link, passo a passo, prazo, solu√ß√£o).
- Nunca prometa o que n√£o pode cumprir.

### Exemplo de estrutura de resposta:

1. Sauda√ß√£o + Agradecimento
Ol√°, [nome do cliente]! Muito obrigado por entrar em contato com o SAC da C&A.

2. Reconhecimento da solicita√ß√£o/d√∫vida
Entendemos que voc√™ [resuma brevemente o motivo do contato, com empatia].

3. Solu√ß√£o ou explica√ß√£o clara
Segue abaixo as informa√ß√µes que voc√™ precisa:  
[explica√ß√£o simples, direta, com instru√ß√µes claras, se necess√°rio].

4. Encaminhamento (se necess√°rio)
Caso precise de mais ajuda, voc√™ tamb√©m pode acessar [link ou canal de suporte adicional].

5. Encerramento cordial
Estamos sempre √† disposi√ß√£o. Agradecemos por escolher a C&A! üòä  
Tenha um √≥timo dia!

---

### Exemplos pr√°ticos de aplica√ß√£o:

Reclama√ß√£o sobre atraso na entrega:
Ol√°, Ana! Sentimos muito pelo atraso no seu pedido e entendemos sua frustra√ß√£o. J√° verificamos em nosso sistema e o pedido #12345 est√° com nova previs√£o de entrega para o dia 18/09.

Sabemos o quanto isso √© importante e estamos acompanhando de perto para garantir que chegue o quanto antes.

Caso n√£o receba at√© essa data, por favor, nos avise por aqui ou pelo canal (xx) para que possamos intervir.

Agradecemos pela paci√™ncia e por escolher a C&A üíô

---

D√∫vida sobre troca de produto:
Oi, Jo√£o! Obrigado por falar com o SAC da C&A.

Voc√™ pode realizar a troca de produtos comprados online em at√© 30 dias ap√≥s o recebimento, diretamente em qualquer loja f√≠sica ou pelo site.


Qualquer dificuldade, √© s√≥ nos chamar! Estamos aqui pra te ajudar.

### Informa√ß√µes relevantes dos documentos:
{context}

### Pergunta do cliente:
{question}
"""

prompt = ChatPromptTemplate.from_template(template_sac_cea)
model  = OllamaLLM(model = 'qwen3:14b', temperature = 0.1,gpu=True, num_gpu = 2,top_k = 200) 

qa_chain = RetrievalQA.from_chain_type(
    llm=model,
    retriever=retriever,
    chain_type="stuff",   # pode ser "map_reduce" ou "refine" tamb√©m
    chain_type_kwargs={"prompt": prompt}  # usa o seu template do SAC
)

#chain  = prompt | model
results = qa_chain.invoke({"query": "quero minha nota fiscal"})
print(results["result"])

#results = chain.invoke({"question": "Como acessar a Nota Fiscal do pedido??"})

#rint(results)
# importar framework
# importar o splitter (recursive character splitter)
# importar modelo de embedding (provavelmente nomic embed)
# escolher o provedor. ollama?


# ##### evaluation 


# from langchain.evaluation import load_evaluator

# # LLM que vai atuar como "juiz"

# # Carrega avaliador de crit√©rio (corrigir, relev√¢ncia, etc.)
# evaluator = load_evaluator("criteria", llm=model, criteria="correctness")
# # Pergunta do usu√°rio
# input_text = "o produto veio danificado e eu gostaria de devolver"
# # Resposta do modelo SAC
# #predicted_response = results
# # Resposta ideal (ground truth, se voc√™ tiver)
# reference = """Se voc√™ j√° recebeu o produto
# Solicite a devolu√ß√£o do produto em at√© 7 dias corridos atrav√©s do SAC.
# Se voc√™ ainda n√£o recebeu o produto
# A nossa orienta√ß√£o √© que voc√™ negue o recebimento do produto quando ele chegar. Ap√≥s alguns dias, assim que a marca
#  parceira receber o seu produto de volta, voc√™ receber√° um e-mail informando que o processo de cancelamento ser√° iniciado.
# Se voc√™ negou o recebimento h√° mais de 10 dias e ainda n√£o recebeu uma comunica√ß√£o, entre em contato atrav√©s dos nossos
#  canais de atendimento. O atendimento por telefone √© realizado de segunda a domingo, das 09h, √†s 22h"
# """

# evaluator = load_evaluator("qa", llm=model, criteria="correctness")

# result = evaluator.evaluate_strings(
#     input="o produto veio danificado e eu gostaria de devolver",
#     prediction=results,
#     reference=reference,
# )

# print(result)



# # load docs  ok
# splitter docks <-
# embed docs
# prompt engineerying
# run chain
# expose to API
